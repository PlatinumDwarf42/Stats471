day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if(all_coin_data$Close[day_curr]-all_coin_data$Close[day_before] > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
i
j
build_response = function(all_coin_data){
row_data_response = c()
for(i in 3:nrow(all_coin_data)-1){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
return(row_data_response)
}
row_data_response = c()
for(i in 3:nrow(all_coin_data)-1){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
all_coin_data$Close[day_curr]
all_coin_data$Close[day_before]
day_before
which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
i-1
i
3:nrow(all_coin_data)-1
row_data_response = c()
for(i in 3:nrow(all_coin_data)){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
all_coin_data$Close[day_curr]
day_curr
i
for(i in 3:(nrow(all_coin_data)-1)){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
day_before
day_curr
i
3:(nrow(all_coin_data)-1)
nrow(all_coin_data)
3:nrow(all_coin_data)
for(i in 3:365){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
row_data_response
length(row_data_response)
row_data_response = c()
for(i in 3:365){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
length(row_data_response)
rep(1, 10)
row_data_response = c()
for(i in 3:365){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
row_data_response = c(rep(1, 10),row_data_response)
length(row_data_response)
build_response = function(all_coin_data){
row_data_response = c()
for(i in 3:365){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
row_data_response = c(rep(1, 10),row_data_response)
return(row_data_response)
}
build_response(all_coin_data)
build_response = function(all_coin_data){
row_data_response = c()
for(i in 3:365){
for(j in seq(2, length(TOP_COINS), 2)){
day_curr = which(all_coin_data$Day.1 == i & all_coin_data$Coin == TOP_COINS[j])
day_before = which(all_coin_data$Day.1 == (i-1) & all_coin_data$Coin == TOP_COINS[j])
if((all_coin_data$Close[day_curr]-all_coin_data$Close[day_before]) > 0){
#print("Went up")
row_data_response = c(row_data_response, 1)
}else{
#print("Went down")
row_data_response = c(row_data_response, 0)
}
}
}
row_data_response = c(rep(1, 10),row_data_response)
return(row_data_response)
}
all_coin_data[is.na(all_coin_data)] <- 0
data_refined = all_coin_data[,-c(1,c(4:7))]
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
pr.out = prcomp(data_refined,  scale=TRUE)
data_refined
prcomp(data_refined[,-1],  scale=TRUE)
all_coin_data[is.na(all_coin_data)] <- 0
data_refined = all_coin_data[,-c(1,c(4:7))]
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Exclude the price data
data_refined = all_coin_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Find 80% cut off
plot(yvec, type='b', xlab = "Principal Components",ylab = "Cumulative variance", main = "",ylim=c(0,1))
dim(data_refined)
data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
output = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
model$coefficients
model$coefficients
model$coefficients[1] + model$coefficients[2]*pca_var[1] + model$coefficients[3]*pca_var[2] + model$coefficients[4]*pca_var[3] + model$coefficients[5]*pca_var[4] +model$coefficients[6]*pca_var[5]
model$coefficients[1] + model$coefficients[2]*pca_var[1] + model$coefficients[3]*pca_var[2] + model$coefficients[4]*pca_var[3] + model$coefficients[5]*pca_var[4] +model$coefficients[6]*pca_var[5]
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[1] + model$coefficients[3]*pca_var[2] + model$coefficients[4]*pca_var[3] + model$coefficients[5]*pca_var[4] +model$coefficients[6]*pca_var[5]
outputs
model$coefficients[2]
pca_var[1]
pca_var[1,]
pca_var[,1]
model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
as_binary
tail(as_binary)
mena(as_binary)
mean(as_binary)
model$coefficients[1]
model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
mean(response)
summary(model)
model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
as_binary == response
mean(as_binary == response)
mean(response)
mean(as_binary == response)
plot(as_binary)
cat("Accuracy:",mean(as_binary == response))
cat("Accuracy:", mean(as_binary == response))
summary(model)
mean(response )
cat("Accuracy:", mean(as_binary == response))
plot(as_binary)
summary(model)
pr.out$rotation[2]
pr.out$rotation[,2]
summary(model)
plot(model)
##Fill NA with zero
all_coin_data[is.na(all_coin_data)] <- 0
##Exclude the price data
data_refined = all_coin_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Find 80% cut off
plot(yvec, type='b', xlab = "Principal Components",ylab = "Cumulative variance", main = "",ylim=c(0,1))
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
pr.out$rotation[,2]
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
plot(model)
##
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
cat("Accuracy:", mean(as_binary == response))
mean(response)
plot(as_binary)
summary(model)
1:length(all_coin_data)
1:length(all_coin_data$Coin)
nrow(all_coin_data)
sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data))
length(sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)))
length(unique(sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data))))
##Bootstrap to try to see the standard error of our estimator
for(i in 1:10){
##Fill NA with zero
temp_data = all_coin_data[sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)),]
temp_data[is.na(temp_data)] <- 0
##Exclude the price data
data_refined = temp_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
cat("Accuracy:", mean(as_binary == response))
}
##Bootstrap to try to see the standard error of our estimator
for(i in 1:10){
##Fill NA with zero
temp_data = all_coin_data[sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)),]
temp_data[is.na(temp_data)] <- 0
##Exclude the price data
data_refined = temp_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
cat("\nAccuracy:", mean(as_binary == response))
}
##Bootstrap to try to see the standard error of our estimator
for(i in 1:10){
##Fill NA with zero
temp_data = all_coin_data[sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)),]
temp_data[is.na(temp_data)] <- 0
##Exclude the price data
data_refined = temp_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
cat("\nAccuracy:", mean(as_binary == response), "Num up:", sum(as_binary == response))
}
##Bootstrap to try to see the standard error of our estimator
for(i in 1:10){
##Fill NA with zero
temp_data = all_coin_data[sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)),]
temp_data[is.na(temp_data)] <- 0
##Exclude the price data
data_refined = temp_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
cat("\nAccuracy:", mean(as_binary == response), "Num up:", sum(as_binary))
}
which(response == 1)
which(as_binary == 1)
response[which(response == 1)]
which(as_binary == 1
which(as_binary == 1)
which(as_binary == 1)
which(as_binary == 1) &  which(response == 1)
which(response == 1)
which(as_binary == 1)
pred_up%in%up
up = which(response == 1)
pred_up = which(as_binary == 1)
pred_up%in%up
##Bootstrap to try to see the standard error of our estimator
for(i in 1:10){
##Fill NA with zero
temp_data = all_coin_data[sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)),]
temp_data[is.na(temp_data)] <- 0
##Exclude the price data
data_refined = temp_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
cat("\nAccuracy:", mean(as_binary == response), "# Predicted up:", sum(as_binary))
up = which(response == 1)
pred_up = which(as_binary == 1)
cat("Percent Predicted up Successfully:", mean(pred_up%in%up))
}
##Bootstrap to try to see the standard error of our estimator
for(i in 1:10){
##Fill NA with zero
temp_data = all_coin_data[sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)),]
temp_data[is.na(temp_data)] <- 0
##Exclude the price data
data_refined = temp_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
cat("\nAccuracy:", mean(as_binary == response), "# Predicted up:", sum(as_binary))
up = which(response == 1)
pred_up = which(as_binary == 1)
cat("\n\tPercent Predicted up Successfully:", mean(pred_up%in%up))
}
##Bootstrap to try to see the standard error of our estimator
overall_acc = c()
up_correct = c()
for(i in 1:100){
##Fill NA with zero
temp_data = all_coin_data[sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)),]
temp_data[is.na(temp_data)] <- 0
##Exclude the price data
data_refined = temp_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
cat("\nAccuracy:", mean(as_binary == response), "# Predicted up:", sum(as_binary))
up = which(response == 1)
overall_acc = c(overall_acc, mean(as_binary == response))
pred_up = which(as_binary == 1)
up_correct = c(up_correct, mean(pred_up%in%up))
cat("\n\tPercent Predicted up Successfully:", mean(pred_up%in%up))
}
##Bootstrap to try to see the standard error of our estimator
overall_acc = c()
up_correct = c()
for(i in 1:100){
##Fill NA with zero
temp_data = all_coin_data[sample(nrow(all_coin_data), replace = TRUE, nrow(all_coin_data)),]
temp_data[is.na(temp_data)] <- 0
##Exclude the price data
data_refined = temp_data[,-c(1,c(4:7))]
##Exclude the coin factor
Sigma = cor(data_refined[,-1])
evec = eigen(Sigma)$vectors
eval = eigen(Sigma)$values
##Exclude the coin factor
pr.out = prcomp(data_refined[,-1],  scale=TRUE)
pve = eval/sum(eval)
yvec = cumsum(pve)
##Lets take first 5 about 80%
##Compute the data value for principle component #1 at each data point, exclude coin
pca_var = data.matrix(data_refined[,-1])%*%matrix(pr.out$rotation[,1:5], nrow=27, ncol=5)
response = build_response(all_coin_data)
model = glm(response~pca_var)
summary(model)
outputs = model$coefficients[1] + model$coefficients[2]*pca_var[,1] + model$coefficients[3]*pca_var[,2] + model$coefficients[4]*pca_var[,3] + model$coefficients[5]*pca_var[,4] +model$coefficients[6]*pca_var[,5]
as_binary = as.integer(outputs > .5)
#cat("\nAccuracy:", mean(as_binary == response), "# Predicted up:", sum(as_binary))
up = which(response == 1)
overall_acc = c(overall_acc, mean(as_binary == response))
pred_up = which(as_binary == 1)
up_correct = c(up_correct, mean(pred_up%in%up))
#cat("\n\tPercent Predicted up Successfully:", mean(pred_up%in%up))
print(i)
}
